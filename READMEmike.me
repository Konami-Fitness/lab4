Part 1A: 

My code starts off at the root node and recursively finds all
the nodes under it. As it recursively moves through the tree 
structure of the document, it gathers the tag names and stores
it all into a string. At the end of the program, the contents
of #info are replaced with the resulting tree. As a web developer,
I'd want to use the DOM in my development because it would enable
me to have more control over elements I'd want to change and be able
to modify the elements and their contents. I would be able to capture 
or respond to user/browser actions as well which would be useful
in web development.

Part 1B:

My method in Part1A, automatically recursed through every node without having
to change anything in the HTML. However, in 1B, I changed the HTML by changing the
element class names to be the name of the parent tag. This way, I could get the next
set of elements to recurse through by simply calling a getElementsByClassName with the parent tag name as the class. The same return value exists for 1a and 1b except for 1b I returned the result in an array and moved it to the bottom of the page rather than
having it at the top. Essentially its the same function but we just used getElementsbyClassName to get our element lists at each recursive level. 

Michael Kokkatt Creativity:

I expressed my creativity in the way I got my solutions. For 1A, I had remembered
from Python there was a way to multiply a char N times simply by doing N*'X' , N
being an int and X being a char and it would print the X, N times. This gave me the inspiration to find a way to do this with javascript. I created a way to get the current level by incrementing or decrementing it depending on what point in the recursion I was in and passed this as an argument into the repeat() function from 
where I was easily able to print the dashes into the accurate amount for each level.
I also found a way to recurse using the getElementsByClassName by setting elements' classes to be named after their parent nodes tag name, and so I could easily just 
get the next set of children by using this.

